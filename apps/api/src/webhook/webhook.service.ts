import { Injectable, Logger } from '@nestjs/common'
import { TelegramService } from '../telegram/telegram.service'
import { BookingsService } from '../bookings/bookings.service'

interface TelegramUpdate {
  update_id: number
  message?: {
    message_id: number
    from: {
      id: number
      is_bot: boolean
      first_name: string
      last_name?: string
      username?: string
    }
    chat: {
      id: number
      first_name?: string
      last_name?: string
      username?: string
      type: string
    }
    date: number
    text?: string
    web_app_data?: {
      data: string
      button_text: string
    }
  }
  callback_query?: {
    id: string
    from: {
      id: number
      is_bot: boolean
      first_name: string
      last_name?: string
      username?: string
    }
    message: {
      message_id: number
      chat: {
        id: number
        type: string
      }
    }
    data: string
  }
}

@Injectable()
export class WebhookService {
  private readonly logger = new Logger(WebhookService.name)

  constructor(
    private telegramService: TelegramService,
    private bookingsService: BookingsService,
  ) {}

  async handleUpdate(update: TelegramUpdate) {
    try {
      this.logger.debug(`Received update: ${JSON.stringify(update)}`)

      if (update.message) {
        await this.handleMessage(update.message)
      } else if (update.callback_query) {
        await this.handleCallbackQuery(update.callback_query)
      }
    } catch (error) {
      this.logger.error('Error handling update:', error)
    }
  }

  private async handleMessage(message: any) {
    const text = message.text?.trim()

    if (text === '/start') {
      await this.telegramService.handleStart(message)
    } else if (message.web_app_data) {
      await this.handleWebAppData(message)
    } else {
      // Handle other text messages
      await this.handleTextMessage(message)
    }
  }

  private async handleWebAppData(message: any) {
    try {
      const data = JSON.parse(message.web_app_data.data)
      
      if (data.type === 'booking_created') {
        // Web app notifies about successful booking
        const booking = data.booking
        await this.telegramService.sendBookingConfirmation(message.chat.id, booking)
      }
    } catch (error) {
      this.logger.error('Error handling web app data:', error)
      await this.telegramService.sendMessage(
        message.chat.id,
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.'
      )
    }
  }

  private async handleTextMessage(message: any) {
    const text = message.text?.toLowerCase()

    if (text?.includes('–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ') || text?.includes('–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å')) {
      const keyboard = {
        inline_keyboard: [
          [
            {
              text: 'üéÆ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ü–ö',
              web_app: { url: process.env.TELEGRAM_WEB_APP_URL }
            }
          ]
        ]
      }

      await this.telegramService.sendMessage(
        message.chat.id,
        '–î–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ü–ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:',
        { reply_markup: keyboard }
      )
    } else if (text?.includes('–ø–æ–º–æ—â—å') || text?.includes('–ø–æ–¥–¥–µ—Ä–∂–∫–∞')) {
      await this.handleSupport(message.chat.id)
    } else {
      // Default response
      await this.telegramService.sendMessage(
        message.chat.id,
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.'
      )
    }
  }

  private async handleCallbackQuery(callbackQuery: any) {
    const data = callbackQuery.data

    if (data === 'my_bookings') {
      await this.handleMyBookings(callbackQuery)
    } else if (data === 'support') {
      await this.handleSupport(callbackQuery.message.chat.id)
    } else if (data.startsWith('cancel_booking_')) {
      const bookingId = data.replace('cancel_booking_', '')
      await this.handleCancelBooking(callbackQuery, bookingId)
    }

    // Answer callback query to remove loading state
    await this.answerCallbackQuery(callbackQuery.id)
  }

  private async handleMyBookings(callbackQuery: any) {
    try {
      const telegramUserId = callbackQuery.from.id.toString()
      const bookings = await this.bookingsService.getUserBookings(telegramUserId)

      if (bookings.length === 0) {
        await this.telegramService.sendMessage(
          callbackQuery.message.chat.id,
          'üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.',
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: 'üéÆ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ü–ö',
                    web_app: { url: process.env.TELEGRAM_WEB_APP_URL }
                  }
                ]
              ]
            }
          }
        )
        return
      }

      const activeBookings = bookings.filter(b => b.status === 'ACTIVE')
      
      let message = 'üìã <b>–í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n\n'
      
      activeBookings.forEach((booking, index) => {
        const startTime = new Intl.DateTimeFormat('ru-RU', {
          day: '2-digit',
          month: '2-digit',
          hour: '2-digit',
          minute: '2-digit',
          timeZone: 'Europe/Moscow'
        }).format(booking.startTime)

        const endTime = new Intl.DateTimeFormat('ru-RU', {
          hour: '2-digit',
          minute: '2-digit',
          timeZone: 'Europe/Moscow'
        }).format(booking.endTime)

        message += `${index + 1}. <b>${booking.pc.label}</b> (${booking.pc.zone.displayName})\n`
        message += `   ‚è∞ ${startTime} - ${endTime}\n`
        message += `   üí∞ ${booking.totalPrice} ‚ÇΩ\n\n`
      })

      const keyboard = {
        inline_keyboard: [
          [
            {
              text: 'üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
              web_app: { url: process.env.TELEGRAM_WEB_APP_URL }
            }
          ]
        ]
      }

      await this.telegramService.sendMessage(
        callbackQuery.message.chat.id,
        message,
        { reply_markup: keyboard }
      )
    } catch (error) {
      this.logger.error('Error fetching user bookings:', error)
      await this.telegramService.sendMessage(
        callbackQuery.message.chat.id,
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞—à–∏—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.'
      )
    }
  }

  private async handleCancelBooking(callbackQuery: any, bookingId: string) {
    try {
      const telegramUserId = callbackQuery.from.id.toString()
      const cancelledBooking = await this.bookingsService.cancelBooking(bookingId, telegramUserId)
      
      await this.telegramService.sendCancellationConfirmation(
        callbackQuery.message.chat.id,
        cancelledBooking
      )
    } catch (error) {
      this.logger.error('Error cancelling booking:', error)
      await this.telegramService.sendMessage(
        callbackQuery.message.chat.id,
        '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ —É–∂–µ –Ω–∞—á–∞–ª–æ—Å—å –∏–ª–∏ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ —Ä–∞–Ω–µ–µ.'
      )
    }
  }

  private async handleSupport(chatId: number) {
    const message = `
üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ KRAKEN Cyber Arena</b>

<b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b>
üì± –¢–µ–ª–µ—Ñ–æ–Ω: +7 (999) 123-45-67
üìß Email: support@kraken-arena.ru
üåê –°–∞–π—Ç: kraken-arena.ru

<b>–ê–¥—Ä–µ—Å:</b>
üè¢ –í–µ–ª–∏–∫–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, 1

<b>–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã:</b>
üïò –ï–∂–µ–¥–Ω–µ–≤–Ω–æ: 09:00 - 00:00

<b>–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏:</b>
üì± VK: vk.com/kraken_arena
üì∑ Instagram: @kraken_arena

–ú—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å! üéÆ
`

    await this.telegramService.sendMessage(chatId, message)
  }

  private async answerCallbackQuery(callbackQueryId: string, text?: string) {
    try {
      const response = await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/answerCallbackQuery`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          callback_query_id: callbackQueryId,
          text,
        }),
      })

      if (!response.ok) {
        throw new Error(`Failed to answer callback query: ${response.statusText}`)
      }
    } catch (error) {
      this.logger.error('Error answering callback query:', error)
    }
  }
}
