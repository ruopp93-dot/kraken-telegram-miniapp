import { Injectable, Logger } from '@nestjs/common'
import { ConfigService } from '@nestjs/config'

interface TelegramMessage {
  chat: {
    id: number
    type: string
  }
  from?: {
    id: number
    first_name: string
    last_name?: string
    username?: string
  }
  text?: string
  web_app_data?: {
    data: string
    button_text: string
  }
}

@Injectable()
export class TelegramService {
  private readonly logger = new Logger(TelegramService.name)
  private readonly botToken: string
  private readonly webAppUrl: string

  constructor(private configService: ConfigService) {
    this.botToken = this.configService.get<string>('TELEGRAM_BOT_TOKEN')
    this.webAppUrl = this.configService.get<string>('TELEGRAM_WEB_APP_URL')
  }

  async sendMessage(chatId: number, text: string, options?: any) {
    try {
      const response = await fetch(`https://api.telegram.org/bot${this.botToken}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: chatId,
          text,
          parse_mode: 'HTML',
          ...options,
        }),
      })

      if (!response.ok) {
        throw new Error(`Telegram API error: ${response.statusText}`)
      }

      return await response.json()
    } catch (error) {
      this.logger.error(`Failed to send message to ${chatId}:`, error)
      throw error
    }
  }

  async sendBookingConfirmation(chatId: number, booking: any) {
    const message = `
üéÆ <b>–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!</b>

üìç <b>–ü–ö:</b> ${booking.pc.label} (${booking.pc.zone.displayName})
‚è∞ <b>–í—Ä–µ–º—è:</b> ${this.formatDateTime(booking.startTime)} - ${this.formatTime(booking.endTime)}
‚è±Ô∏è <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> ${Math.round(booking.duration / 60)} —á.
üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> ${booking.pricing.totalPrice} ‚ÇΩ

${booking.additionalJoysticks > 0 ? `üéÆ <b>–î–æ–ø. –¥–∂–æ–π—Å—Ç–∏–∫–∏:</b> ${booking.additionalJoysticks} —à—Ç.\n` : ''}
${booking.notes ? `üìù <b>–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:</b> ${booking.notes}\n` : ''}

<i>–û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–∂–Ω–æ –¥–æ –Ω–∞—á–∞–ª–∞ —Å–µ–∞–Ω—Å–∞.</i>
`

    const keyboard = {
      inline_keyboard: [
        [
          {
            text: 'üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
            web_app: { url: this.webAppUrl }
          }
        ],
        [
          {
            text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ',
            callback_data: `cancel_booking_${booking.id}`
          }
        ]
      ]
    }

    return this.sendMessage(chatId, message, { reply_markup: keyboard })
  }

  async sendBookingReminder(chatId: number, booking: any, minutesBefore: number) {
    const message = `
‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏!</b>

–í–∞—à —Å–µ–∞–Ω—Å –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ ${minutesBefore} –º–∏–Ω—É—Ç.

üìç <b>–ü–ö:</b> ${booking.pc.label} (${booking.pc.zone.displayName})
‚è∞ <b>–í—Ä–µ–º—è:</b> ${this.formatDateTime(booking.startTime)} - ${this.formatTime(booking.endTime)}

üè¢ <b>–ê–¥—Ä–µ—Å:</b> –í–µ–ª–∏–∫–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, 1
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> +7 (999) 123-45-67

–ñ–¥–µ–º –≤–∞—Å –≤ KRAKEN Cyber Arena! üéÆ
`

    const keyboard = {
      inline_keyboard: [
        [
          {
            text: 'üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
            web_app: { url: this.webAppUrl }
          }
        ]
      ]
    }

    return this.sendMessage(chatId, message, { reply_markup: keyboard })
  }

  async sendCancellationConfirmation(chatId: number, booking: any) {
    const message = `
‚ùå <b>–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>

üìç <b>–ü–ö:</b> ${booking.pc.label} (${booking.pc.zone.displayName})
‚è∞ <b>–í—Ä–µ–º—è:</b> ${this.formatDateTime(booking.startTime)} - ${this.formatTime(booking.endTime)}

–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
`

    const keyboard = {
      inline_keyboard: [
        [
          {
            text: 'üì± –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞',
            web_app: { url: this.webAppUrl }
          }
        ]
      ]
    }

    return this.sendMessage(chatId, message, { reply_markup: keyboard })
  }

  async handleStart(message: TelegramMessage) {
    const welcomeText = `
üéÆ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ KRAKEN Cyber Arena!</b>

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä–æ–≤—ã–µ –ü–ö –∏ PS5 –∫–æ–Ω—Å–æ–ª–∏ –≤ –Ω–∞—à–µ–º –∫–∏–±–µ—Ä—Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–º –∫–ª—É–±–µ –≤ –í–µ–ª–∏–∫–æ–º –ù–æ–≤–≥–æ—Ä–æ–¥–µ.

<b>–ù–∞—à–∏ –∑–æ–Ω—ã:</b>
üñ•Ô∏è Standard - RTX 3060, 240Hz –º–æ–Ω–∏—Ç–æ—Ä—ã
üíé VIP - RTX 4060 Ti, 360Hz –º–æ–Ω–∏—Ç–æ—Ä—ã  
üëë Premium - RTX 4070, 240Hz –º–æ–Ω–∏—Ç–æ—Ä—ã
üéÆ PS5 - –∫–æ–Ω—Å–æ–ª–∏ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∂–æ–π—Å—Ç–∏–∫–∞–º–∏

<b>–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã:</b> 09:00 - 00:00
<b>–ê–¥—Ä–µ—Å:</b> –í–µ–ª–∏–∫–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, 1
<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> +7 (999) 123-45-67
`

    const keyboard = {
      inline_keyboard: [
        [
          {
            text: 'üéÆ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ü–ö',
            web_app: { url: this.webAppUrl }
          }
        ],
        [
          {
            text: 'üìã –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
            callback_data: 'my_bookings'
          },
          {
            text: 'üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞',
            callback_data: 'support'
          }
        ]
      ]
    }

    return this.sendMessage(message.chat.id, welcomeText, { reply_markup: keyboard })
  }

  private formatDateTime(date: Date): string {
    return new Intl.DateTimeFormat('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
      timeZone: 'Europe/Moscow'
    }).format(date)
  }

  private formatTime(date: Date): string {
    return new Intl.DateTimeFormat('ru-RU', {
      hour: '2-digit',
      minute: '2-digit',
      timeZone: 'Europe/Moscow'
    }).format(date)
  }
}
